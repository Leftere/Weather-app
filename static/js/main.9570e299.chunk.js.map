{"version":3,"sources":["logo.svg","components/Titiles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Titles","react_default","a","createElement","className","Form","_ref","getWeather","onSubmit","type","name","placeholder","weather","temperature","city","country","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","stop","_this$state","this","Titiles","components_Form","Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9570e299.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react'\n\n\nconst Titles = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <p className=\"title-container__subtitle\">Find out temperature</p>\n    </div>\n)\n\n\n\n export default Titles;","import React, { Component} from \"react\";\n\n\nconst Form = ({getWeather}) => {\n    return(\n        <form onSubmit={getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"city...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n        <button >Get Weather</button>\n    </form>\n    )\n}\n\n\nexport default Form;\n\n\n\n\n","import React from \"react\";\n\nconst weather = ({ temperature, city, country, humidity, description, error }) => {\n    return(\n        <div className=\"weather__info\">\n        { \n            city && country &&  <h3 className=\"weather__key\"> Location:<span className=\"weather__value\"> {city}, {country } </span></h3>\n        }\n        {\n            temperature && <p className=\"weather__key\">Temperature:  <span className=\"weather__value\">{temperature} </span></p>\n        }\n        {\n            humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{humidity}</span> </p>\n        }\n        {\n            description && <p className=\"weather__key\"> Description: <span className=\"weather__value\"> {description} </span></p>\n        }\n        {\n            error && <p className=\"weather__key\">  <span className=\"weather__value\">{error} </span></p>\n        }\n\n\n        </div>\n        )\n}\n\n\nexport default weather;\n\n\n\n\n","import React, { Component} from 'react';\nimport logo from './logo.svg';\n\nimport Titles from \"./components/Titiles\";\nimport Form from './components/Form';\nimport Weather from './components/Weather'\n\nconst API_KEY = \"89507e2493037008684adbeadb131c19\";\n\n\nclass App extends Component {\n  state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: ''\n  }\ncomponentDidMount(){\n  \n}\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    // const cut = e.target.elements.name\n    \n   \n    if(city && country ) {\n      console.log(data)\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter Value'\n      })\n    }\n   \n  }\n  render() {\n    const { temperature, city, country, humidity, description, error } = this.state;\n    return(\n      <div className=\"wrapper\">\n      <div className=\"main\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-xs-5 title-container\">\n            <Titles />\n            </div>\n            <div className=\"col-xs-7 form-container\"> \n            <Form getWeather={this.getWeather}/>\n<Weather temperature={temperature}\n          city={city}\n          country={country}\n          humidity={humidity}\n          description={description}\n          error={error}\n/>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      </div>\n    ) \n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}